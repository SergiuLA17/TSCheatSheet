{"id":"../category/types.html","dependencies":[{"name":"./../js/script.js","dynamic":true,"resolved":"/Users/segio/WebstormProjects/TSCheatSheet/js/script.js","parent":"/Users/segio/WebstormProjects/TSCheatSheet/category/types.html"},{"name":"./../js/button.js","dynamic":true,"resolved":"/Users/segio/WebstormProjects/TSCheatSheet/js/button.js","parent":"/Users/segio/WebstormProjects/TSCheatSheet/category/types.html"},{"name":"./../css/content.css","dynamic":true,"resolved":"/Users/segio/WebstormProjects/TSCheatSheet/css/content.css","parent":"/Users/segio/WebstormProjects/TSCheatSheet/category/types.html"},{"name":"./../css/button.css","dynamic":true,"resolved":"/Users/segio/WebstormProjects/TSCheatSheet/css/button.css","parent":"/Users/segio/WebstormProjects/TSCheatSheet/category/types.html"},{"name":"./../index.html","dynamic":true,"resolved":"/Users/segio/WebstormProjects/TSCheatSheet/index.html","entry":true,"parent":"/Users/segio/WebstormProjects/TSCheatSheet/category/types.html"},{"name":"/Users/segio/package.json","includedInParent":true,"mtime":1677167980474}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n\n    <meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\">\n    <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\">\n    <link href=\"/4d585f9387deb4b55fb2e184f5aa2ae4.js\" rel=\"stylesheet\">\n    <link href=\"/c06b307f38f8a2264d6125c5447dd70b.js\" rel=\"stylesheet\">\n    <link href=\"/8519916c728143e15d4c451740c45981.css\" rel=\"stylesheet\">\n    <link href=\"/feab1f06663f8786104d484232f74777.css\" rel=\"stylesheet\">\n    <link href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/styles/default.min.css\" rel=\"stylesheet\">\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/highlight.min.js\"></script>\n    <script>hljs.highlightAll();</script>\n\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n\n    <title>Document</title>\n\n</head>\n<body>\n\n<div id=\"rendered-js\">\n    <a class=\"btn-flip\" data-back=\"Back\" data-front=\"Back\" href=\"/aeb838fd801aabb6b0904e22562b7d65.html\"></a>\n    <div class=\"accordionWrapper\">\n        <!--String-->\n        <div class=\"accordionItem close\">\n            <h2 class=\"accordionItemHeading \">String</h2>\n            <div class=\"accordionItemContent\">\n                <pre class=\"codeStyle\">\n                    <code>\n//how to concat 2 strings\nlet a: string = 'abc';\nlet b: string = 'def';\nlet c:string = a + b;\n//result is abcdef\n\n//use concat method\nlet d: string = a.concat(b);\n//result is abcdef\n\n//use template literals\nlet e: string = `${a}${b}`;\n//result is abcdef\n\n//use join method\nlet f: string = [a, b].join('');\n//result is abcdef\n\n//use reduce method\nlet h: string = [a, b].reduce((acc, val) => acc + val, '');\n//result is abcdef\n\n                  </code>\n                </pre>\n\n            </div>\n        </div>\n        <!--Arrays-->\n        <div class=\"accordionItem close\">\n            <h2 class=\"accordionItemHeading \">Arrays</h2>\n            <div class=\"accordionItemContent\">\n                <pre>\n                    <code>\nconst carMakers = ['ford', 'toyota', 'chevy'];\nconst dates = [new Date(), new Date()];\nconst carsByMake = [\n    ['f150'],\n    ['corolla'],\n    ['camaro']\n]\n\n//in cazul dat extragem din arrayul carMakers doar primul element si anotam variabila car cu tipul string\nconst car = carMakers[0];\n//in cazul dat extragem din arrayul carMakers doar primul element si anotam variabila myCar cu tipul string\nconst myCar = carMakers.pop();\n\n//in acest metoda map o sa copie toate lementele in array-ul carMakersMap\nconst carMakersMap: string[] = carMakers.map((car: string): string => {\n    return car;\n});\n\n// In cazul dat de mai jos, putem adauga doar elemente de tipul string si date\nconst importantDates = [new Date(), '2030-10-10'];\nimportantDates.push('2030-10-10');\nimportantDates.push(new Date());\nconsole.log(importantDates);\n\n\n                    </code>\n                \n                    </pre>\n            </div>\n        </div>\n        <!--Tuples-->\n        <div class=\"accordionItem close\">\n            <h2 class=\"accordionItemHeading \">Tuples</h2>\n            <div class=\"accordionItemContent\">\n                <pre>\n                    <code>\n//tupele sunt niste array-uri care au un numar fix de elemente, si fiecare element are un tip specific\n//si nu pot fi adaugate elemente noi in array si nu putem schimba ordinea elementelor\n//tupele sunt folosite cand avem un array care are un numar fix de elemente\n//dar nu stim ce tip de date vor fi in array\n//nu se folosesc foarte des\n\nconst drink = {\n    color: 'brown',\n    carbonated: true,\n    sugar: 40\n}\n\ntype Drink = [string, boolean, number];\n\nconst pepsi: Drink = ['brown', true, 40];\nconst sprite: Drink = ['clear', true, 40];\nconst tea: Drink = ['brown', false, 0];\n\n                        </code>\n                        </pre>\n\n            </div>\n        </div>\n        <!--Classes-->\n        <div class=\"accordionItem close\">\n            <h2 class=\"accordionItemHeading \">Type interface</h2>\n            <div class=\"accordionItemContent\">\n                <pre class=\"codeStyle\"><code>\n\n                    </code></pre>\n\n            </div>\n        </div>\n        <!--Tuples-->\n        <div class=\"accordionItem close\">\n            <h2 class=\"accordionItemHeading \">Type interface</h2>\n            <div class=\"accordionItemContent\">\n                Prin type interface typescriptul singur va afla tipul de date al unei variabile initializate.\n                Lucreaza numai atunci cand declararea si initializarea se face intr-o linie.\n\n            </div>\n        </div>\n    </div>\n</div>\n<script src=\"/4d585f9387deb4b55fb2e184f5aa2ae4.js\">\n</script>\n\n</body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"b0f50949d25df57aa4edef37ecc4ce1e","cacheData":{"env":{}}}